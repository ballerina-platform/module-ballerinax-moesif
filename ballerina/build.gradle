/*
 * Copyright (c) 2025, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Moesif Extension - Ballerina Module'

configurations {
    nativeJar {
        transitive false
    }
    externalJars {
        transitive false
    }
    distribution {
        canBeConsumed true
        canBeResolved false
    }
}

dependencies {
    nativeJar project(':moesif-extension-native')

    externalJars "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
    externalJars "io.opentelemetry:opentelemetry-context:${openTelemetryVersion}"
    externalJars "io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}"
    externalJars "io.opentelemetry:opentelemetry-sdk-trace:${openTelemetryVersion}"
    externalJars "io.opentelemetry.semconv:opentelemetry-semconv:${openTelemetrySemconvVersion}"
    externalJars "io.opentelemetry:opentelemetry-exporter-otlp-http-trace:${openTelemetryExporterVersion}"
    externalJars "io.opentelemetry:opentelemetry-exporter-otlp-common:${openTelemetryExporterVersion}"
    externalJars "io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}"
    externalJars "com.squareup.okhttp3:okhttp:4.12.0"
    externalJars "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"
    externalJars "com.squareup.okio:okio:3.9.0"
}

clean {
    delete "${project.projectDir}/target"
    delete "${project.projectDir}/Ballerina.lock"
    delete "${project.projectDir}/ballerina-internal.log"
    delete "${project.projectDir}/build"
    doLast {
        // Force cleanup with retry
        ant.delete(dir: 'ballerina/build', failonerror: false, includeemptydirs: true)
    }
}

task copyExternalJarsToLib(type: Copy) {
    into "${project.projectDir}/lib"
    from configurations.externalJars
}

def packageOrg = "ballerinax"
def packageName = "moesif"
def ballerinaConfigFile = new File("${project.projectDir}/Ballerina.toml")
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text
def artifactJar = file("$project.projectDir/target/cache/${packageOrg}/${packageName}/${tomlVersion}/java21/")
def platform = "java21"
def skipTests = false

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task updateTomlFiles {
    doLast {
        def openTelemetryVersion = project.openTelemetryVersion
        def openTelemetrySDKVersion = project.openTelemetrySDKVersion
        def openTelemetryExporterVersion = project.openTelemetryExporterVersion
        def openTelemetrySemconvVersion = project.openTelemetrySemconvVersion
        def okhttpVersion = project.okhttpVersion
        def kotlinVersion = project.kotlinVersion
        def okioVersion = project.okioVersion
        def ballerinaLangVersion = project.ballerinaLangVersion

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@opentelemetry.version@", openTelemetryVersion)
        newConfig = newConfig.replace("@opentelemetrySDK.version@", openTelemetrySDKVersion)
        newConfig = newConfig.replace("@opentelemetryExporter.version@", openTelemetryExporterVersion)
        newConfig = newConfig.replace("@opentelemetrySemconv.version@", openTelemetrySemconvVersion)
        newConfig = newConfig.replace("@opentelemetryExporter.version@", openTelemetryExporterVersion)
        newConfig = newConfig.replace("@okhttp.version@", okhttpVersion)
        newConfig = newConfig.replace("@kotlin.version@", kotlinVersion)
        newConfig = newConfig.replace("@okio.version@", okioVersion)
        newConfig = newConfig.replace("@ballerina.version@", ballerinaLangVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    isConnector = true
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn ":moesif-extension-native:build"
test.dependsOn ":moesif-extension-native:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build