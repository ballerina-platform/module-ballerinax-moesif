/*
 * Copyright (c) 2025, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
}

description = 'Ballerina - Moesif Extension - Native Module'

dependencies {
    checkstyle project(':build-config:checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    implementation "org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}"
    implementation "io.opentelemetry:opentelemetry-context:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-trace:${openTelemetrySDKVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-common:${openTelemetrySDKVersion}"
    implementation "io.opentelemetry.semconv:opentelemetry-semconv:${openTelemetrySemconvVersion}"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp-http-trace:${openTelemetryExporterVersion}"
    implementation "io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-extension-jaeger-remote-sampler:${openTelemetrySDKVersion}"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.23'
    implementation "com.squareup.okio:okio:3.9.0"
    
    implementation "io.opentelemetry:opentelemetry-exporter-otlp-common:${openTelemetryExporterVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

checkstyle {
    toolVersion '7.8.2'
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyleMain.dependsOn(":build-config:checkstyle:downloadCheckstyleRuleFiles")

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "moesif-extension-native"
            version = project.version
            artifact jar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task copyJavaClassFiles(type: Copy) {
    dependsOn(compileJava)
    from("${project.buildDir}/classes") {
        exclude '**/module-info.class'
        include '**/*.class'
    }
    into "${project.rootDir.absolutePath}/build/classes"
}
