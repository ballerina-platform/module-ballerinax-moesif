/*
 * Copyright (c) 2025, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Moesif Extension - Ballerina Tests'

configurations {
    nativeJar {
        transitive false
    }
    externalJars {
        transitive false
    }
    distribution {
        canBeConsumed true
        canBeResolved false
    }
}

clean {
    delete "${project.projectDir}/target"
    delete "${project.projectDir}/Ballerina.lock"
    delete "${project.projectDir}/ballerina-internal.log"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

def groupParams = ""
def disableGroups = ""
def windowsDisableGroups = "--disable-groups disabledOnWindows"
def debugParams = ""
def balJavaDebugParam = ""
def testParams = "--code-coverage --coverage-format=xml"
def nativeFlag = ""

def packageOrg = "ballerinax"
def packageName = "moesif"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def testPackages = ["moesif-server-tests"]

def moesifServerTestConfigFile = new File("${project.projectDir}/moesif-server-tests/Ballerina.toml")
def moesifServerTestOriginalConfig = moesifServerTestConfigFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

def skipTests = false

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":moesif-extension-ballerina-tests:ballerinaTest")) {
        skipTests = true
    }
}

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty('balNativeTest')) {
        nativeFlag = '--native'
    }
    if (project.hasProperty('balTests')) {
        testPackages = project.findProperty('balTests').toString().split(",")
    }
    if (project.hasProperty('skipBalTests')) {
        project.findProperty('skipBalTests').toString().split(",").each {testPackage ->
            testPackages.remove(testPackage)
        }
    }
}

task updateTomlVerions {
    dependsOn ":moesif-extension-ballerina:ballerinaBuild"

    doLast {
        def newConfig = moesifServerTestConfigFile.text.replace("@toml.version@", tomlVersion)
        moesifServerTestConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        moesifServerTestConfigFile.text = moesifServerTestOriginalConfig
    }
}

task ballerinaTest {
    dependsOn ":moesif-extension-ballerina:ballerinaBuild"
    dependsOn ":moesif-extension-ballerina:publishBalaFileToLocal"
    dependsOn initializeVariables
    dependsOn updateTomlVerions
    finalizedBy(revertTomlFile)
    doLast {
        testPackages.each { testPackage ->
            def env = "JAVA_OPTS -DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true ${groupParams}" +
                    " ${disableGroups} ${windowsDisableGroups} ${debugParams}"
            executeBalCommand("test ${testParams}", "${project.projectDir}/${testPackage}", env)
        }
    }
}

test.dependsOn ballerinaTest
